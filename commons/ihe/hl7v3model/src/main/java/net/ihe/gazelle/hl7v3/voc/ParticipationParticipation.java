/**
 * ParticipationParticipation.java
 * <p>
 * File generated from the voc::ParticipationParticipation uml Enumeration
 * Generated by IHE - europe, gazelle team
 */
package net.ihe.gazelle.hl7v3.voc;

import jakarta.xml.bind.annotation.XmlEnum;
import jakarta.xml.bind.annotation.XmlEnumValue;
import jakarta.xml.bind.annotation.XmlRootElement;
import jakarta.xml.bind.annotation.XmlType;
/**
 * Description of the enumeration ParticipationParticipation.
 *
 */

@XmlType(name = "ParticipationParticipation")
@XmlEnum
@XmlRootElement(name = "ParticipationParticipation")
public enum ParticipationParticipation {
	@XmlEnumValue("ADM")
	ADM("ADM"),
	@XmlEnumValue("ATND")
	ATND("ATND"),
	@XmlEnumValue("AUT")
	AUT("AUT"),
	@XmlEnumValue("AUTHEN")
	AUTHEN("AUTHEN"),
	@XmlEnumValue("BBY")
	BBY("BBY"),
	@XmlEnumValue("BEN")
	BEN("BEN"),
	@XmlEnumValue("CAGNT")
	CAGNT("CAGNT"),
	@XmlEnumValue("CALLBCK")
	CALLBCK("CALLBCK"),
	@XmlEnumValue("CON")
	CON("CON"),
	@XmlEnumValue("COV")
	COV("COV"),
	@XmlEnumValue("CSM")
	CSM("CSM"),
	@XmlEnumValue("CST")
	CST("CST"),
	@XmlEnumValue("DEV")
	DEV("DEV"),
	@XmlEnumValue("DIR")
	DIR("DIR"),
	@XmlEnumValue("DIS")
	DIS("DIS"),
	@XmlEnumValue("DIST")
	DIST("DIST"),
	@XmlEnumValue("DON")
	DON("DON"),
	@XmlEnumValue("DST")
	DST("DST"),
	@XmlEnumValue("ELOC")
	ELOC("ELOC"),
	@XmlEnumValue("ENT")
	ENT("ENT"),
	@XmlEnumValue("ESC")
	ESC("ESC"),
	@XmlEnumValue("EXPAGNT")
	EXPAGNT("EXPAGNT"),
	@XmlEnumValue("EXPART")
	EXPART("EXPART"),
	@XmlEnumValue("EXPTRGT")
	EXPTRGT("EXPTRGT"),
	@XmlEnumValue("EXSRC")
	EXSRC("EXSRC"),
	@XmlEnumValue("GUAR")
	GUAR("GUAR"),
	@XmlEnumValue("HLD")
	HLD("HLD"),
	@XmlEnumValue("IND")
	IND("IND"),
	@XmlEnumValue("INF")
	INF("INF"),
	@XmlEnumValue("IRCP")
	IRCP("IRCP"),
	@XmlEnumValue("LA")
	LA("LA"),
	@XmlEnumValue("LOC")
	LOC("LOC"),
	@XmlEnumValue("NOT")
	NOT("NOT"),
	@XmlEnumValue("NRD")
	NRD("NRD"),
	@XmlEnumValue("ORG")
	ORG("ORG"),
	@XmlEnumValue("PART")
	PART("PART"),
	@XmlEnumValue("PPRF")
	PPRF("PPRF"),
	@XmlEnumValue("PRCP")
	PRCP("PRCP"),
	@XmlEnumValue("PRD")
	PRD("PRD"),
	@XmlEnumValue("PRF")
	PRF("PRF"),
	@XmlEnumValue("RCT")
	RCT("RCT"),
	@XmlEnumValue("RCV")
	RCV("RCV"),
	@XmlEnumValue("RDV")
	RDV("RDV"),
	@XmlEnumValue("REF")
	REF("REF"),
	@XmlEnumValue("REFB")
	REFB("REFB"),
	@XmlEnumValue("REFT")
	REFT("REFT"),
	@XmlEnumValue("RESP")
	RESP("RESP"),
	@XmlEnumValue("RML")
	RML("RML"),
	@XmlEnumValue("SBJ")
	SBJ("SBJ"),
	@XmlEnumValue("SPC")
	SPC("SPC"),
	@XmlEnumValue("SPRF")
	SPRF("SPRF"),
	@XmlEnumValue("TRANS")
	TRANS("TRANS"),
	@XmlEnumValue("TRC")
	TRC("TRC"),
	@XmlEnumValue("VIA")
	VIA("VIA"),
	@XmlEnumValue("VRF")
	VRF("VRF"),
	@XmlEnumValue("WIT")
	WIT("WIT");
	
	private final String value;

    ParticipationParticipation(String v) {
        value = v;
    }
    
     public String value() {
        return value;
    }

    public static ParticipationParticipation fromValue(String v) {
        for (ParticipationParticipation c: ParticipationParticipation.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }
	
}