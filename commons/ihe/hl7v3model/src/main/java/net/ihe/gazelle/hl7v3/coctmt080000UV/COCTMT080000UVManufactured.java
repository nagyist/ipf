/**
 * COCTMT080000UVManufactured.java
 * <p>
 * File generated from the coctmt080000UV::COCTMT080000UVManufactured uml Class
 * Generated by IHE - europe, gazelle team
 */
package net.ihe.gazelle.hl7v3.coctmt080000UV;

import java.io.Serial;
import java.util.ArrayList;
import java.util.List;

import jakarta.xml.bind.JAXBContext;
import jakarta.xml.bind.JAXBException;
import jakarta.xml.bind.Marshaller;
import jakarta.xml.bind.annotation.XmlAccessType;
import jakarta.xml.bind.annotation.XmlAccessorType;
import jakarta.xml.bind.annotation.XmlAttribute;
import jakarta.xml.bind.annotation.XmlElement;
import jakarta.xml.bind.annotation.XmlRootElement;
import jakarta.xml.bind.annotation.XmlTransient;
import jakarta.xml.bind.annotation.XmlType;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;

import net.ihe.gazelle.gen.common.ConstraintValidatorModule;

import org.w3c.dom.Document;
import org.w3c.dom.Node;


/**
 * Description of the class COCTMT080000UVManufactured.
 *
 */

@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "COCT_MT080000UV.Manufactured", propOrder = {
	"realmCode",
	"typeId",
	"templateId",
	"code",
	"quantity",
	"desc",
	"riskCode",
	"handlingCode",
	"lotNumberText",
	"expirationTime",
	"asSpecimenAlternateIdentifier",
	"asManufacturedProduct",
	"asSpecimenStub",
	"asContent",
	"additive",
	"classCode",
	"determinerCode",
	"nullFlavor"
})
@XmlRootElement(name = "COCT_MT080000UV.Manufactured")
public class COCTMT080000UVManufactured implements java.io.Serializable {
	
	/**
	 * 
	 */
	@Serial
    private static final long serialVersionUID = 1L;

	
	@XmlElement(name = "realmCode", namespace = "urn:hl7-org:v3")
	public List<net.ihe.gazelle.hl7v3.datatypes.CS> realmCode;
	@XmlElement(name = "typeId", namespace = "urn:hl7-org:v3")
	public net.ihe.gazelle.hl7v3.datatypes.II typeId;
	@XmlElement(name = "templateId", namespace = "urn:hl7-org:v3")
	public List<net.ihe.gazelle.hl7v3.datatypes.II> templateId;
	@XmlElement(name = "code", required = true, namespace = "urn:hl7-org:v3")
	public net.ihe.gazelle.hl7v3.datatypes.CE code;
	@XmlElement(name = "quantity", namespace = "urn:hl7-org:v3")
	public List<net.ihe.gazelle.hl7v3.datatypes.PQ> quantity;
	@XmlElement(name = "desc", namespace = "urn:hl7-org:v3")
	public net.ihe.gazelle.hl7v3.datatypes.ST desc;
	@XmlElement(name = "riskCode", namespace = "urn:hl7-org:v3")
	public net.ihe.gazelle.hl7v3.datatypes.CE riskCode;
	@XmlElement(name = "handlingCode", namespace = "urn:hl7-org:v3")
	public net.ihe.gazelle.hl7v3.datatypes.CE handlingCode;
	@XmlElement(name = "lotNumberText", namespace = "urn:hl7-org:v3")
	public net.ihe.gazelle.hl7v3.datatypes.ST lotNumberText;
	@XmlElement(name = "expirationTime", namespace = "urn:hl7-org:v3")
	public net.ihe.gazelle.hl7v3.datatypes.IVLTS expirationTime;
	@XmlElement(name = "asSpecimenAlternateIdentifier", namespace = "urn:hl7-org:v3")
	public List<net.ihe.gazelle.hl7v3.coctmt080000UV.COCTMT080000UVSpecimenAlternateIdentifier> asSpecimenAlternateIdentifier;
	@XmlElement(name = "asManufacturedProduct", required = true, namespace = "urn:hl7-org:v3")
	public net.ihe.gazelle.hl7v3.coctmt080000UV.COCTMT080000UVManufacturedProduct asManufacturedProduct;
	@XmlElement(name = "asSpecimenStub", namespace = "urn:hl7-org:v3")
	public List<net.ihe.gazelle.hl7v3.coctmt080000UV.COCTMT080000UVSpecimenStub> asSpecimenStub;
	@XmlElement(name = "asContent", namespace = "urn:hl7-org:v3")
	public net.ihe.gazelle.hl7v3.coctmt080000UV.COCTMT080000UVContent1 asContent;
	@XmlElement(name = "additive", namespace = "urn:hl7-org:v3")
	public List<net.ihe.gazelle.hl7v3.coctmt080000UV.COCTMT080000UVAdditive> additive;
	@XmlAttribute(name = "classCode", required = true)
	public net.ihe.gazelle.hl7v3.voc.EntityClassManufacturedMaterial classCode;
	@XmlAttribute(name = "determinerCode", required = true)
	public net.ihe.gazelle.hl7v3.voc.EntityDeterminer determinerCode;
	@XmlAttribute(name = "nullFlavor")
	public net.ihe.gazelle.hl7v3.voc.NullFlavor nullFlavor;
	
	/**
	 * An attribute containing marshalled element node
	 */
	@XmlTransient
	private org.w3c.dom.Node _xmlNodePresentation;
	
	
	/**
	 * Return realmCode.
	 * @return realmCode
	 */
	public List<net.ihe.gazelle.hl7v3.datatypes.CS> getRealmCode() {
		if (realmCode == null) {
	        realmCode = new ArrayList<>();
	    }
	    return realmCode;
	}
	
	/**
	 * Set a value to attribute realmCode.
     */
	public void setRealmCode(List<net.ihe.gazelle.hl7v3.datatypes.CS> realmCode) {
	    this.realmCode = realmCode;
	}
	
	
	
	/**
	 * Add a realmCode to the realmCode collection.
	 * @param realmCode_elt Element to add.
	 */
	public void addRealmCode(net.ihe.gazelle.hl7v3.datatypes.CS realmCode_elt) {
	    this.realmCode.add(realmCode_elt);
	}
	
	/**
	 * Remove a realmCode to the realmCode collection.
	 * @param realmCode_elt Element to remove
	 */
	public void removeRealmCode(net.ihe.gazelle.hl7v3.datatypes.CS realmCode_elt) {
	    this.realmCode.remove(realmCode_elt);
	}
	
	/**
	 * Return typeId.
	 * @return typeId
	 */
	public net.ihe.gazelle.hl7v3.datatypes.II getTypeId() {
	    return typeId;
	}
	
	/**
	 * Set a value to attribute typeId.
     */
	public void setTypeId(net.ihe.gazelle.hl7v3.datatypes.II typeId) {
	    this.typeId = typeId;
	}
	
	
	
	
	/**
	 * Return templateId.
	 * @return templateId
	 */
	public List<net.ihe.gazelle.hl7v3.datatypes.II> getTemplateId() {
		if (templateId == null) {
	        templateId = new ArrayList<>();
	    }
	    return templateId;
	}
	
	/**
	 * Set a value to attribute templateId.
     */
	public void setTemplateId(List<net.ihe.gazelle.hl7v3.datatypes.II> templateId) {
	    this.templateId = templateId;
	}
	
	
	
	/**
	 * Add a templateId to the templateId collection.
	 * @param templateId_elt Element to add.
	 */
	public void addTemplateId(net.ihe.gazelle.hl7v3.datatypes.II templateId_elt) {
	    this.templateId.add(templateId_elt);
	}
	
	/**
	 * Remove a templateId to the templateId collection.
	 * @param templateId_elt Element to remove
	 */
	public void removeTemplateId(net.ihe.gazelle.hl7v3.datatypes.II templateId_elt) {
	    this.templateId.remove(templateId_elt);
	}
	
	/**
	 * Return code.
	 * @return code
	 */
	public net.ihe.gazelle.hl7v3.datatypes.CE getCode() {
	    return code;
	}
	
	/**
	 * Set a value to attribute code.
     */
	public void setCode(net.ihe.gazelle.hl7v3.datatypes.CE code) {
	    this.code = code;
	}
	
	
	
	
	/**
	 * Return quantity.
	 * @return quantity
	 */
	public List<net.ihe.gazelle.hl7v3.datatypes.PQ> getQuantity() {
		if (quantity == null) {
	        quantity = new ArrayList<>();
	    }
	    return quantity;
	}
	
	/**
	 * Set a value to attribute quantity.
     */
	public void setQuantity(List<net.ihe.gazelle.hl7v3.datatypes.PQ> quantity) {
	    this.quantity = quantity;
	}
	
	
	
	/**
	 * Add a quantity to the quantity collection.
	 * @param quantity_elt Element to add.
	 */
	public void addQuantity(net.ihe.gazelle.hl7v3.datatypes.PQ quantity_elt) {
	    this.quantity.add(quantity_elt);
	}
	
	/**
	 * Remove a quantity to the quantity collection.
	 * @param quantity_elt Element to remove
	 */
	public void removeQuantity(net.ihe.gazelle.hl7v3.datatypes.PQ quantity_elt) {
	    this.quantity.remove(quantity_elt);
	}
	
	/**
	 * Return desc.
	 * @return desc
	 */
	public net.ihe.gazelle.hl7v3.datatypes.ST getDesc() {
	    return desc;
	}
	
	/**
	 * Set a value to attribute desc.
     */
	public void setDesc(net.ihe.gazelle.hl7v3.datatypes.ST desc) {
	    this.desc = desc;
	}
	
	
	
	
	/**
	 * Return riskCode.
	 * @return riskCode
	 */
	public net.ihe.gazelle.hl7v3.datatypes.CE getRiskCode() {
	    return riskCode;
	}
	
	/**
	 * Set a value to attribute riskCode.
     */
	public void setRiskCode(net.ihe.gazelle.hl7v3.datatypes.CE riskCode) {
	    this.riskCode = riskCode;
	}
	
	
	
	
	/**
	 * Return handlingCode.
	 * @return handlingCode
	 */
	public net.ihe.gazelle.hl7v3.datatypes.CE getHandlingCode() {
	    return handlingCode;
	}
	
	/**
	 * Set a value to attribute handlingCode.
     */
	public void setHandlingCode(net.ihe.gazelle.hl7v3.datatypes.CE handlingCode) {
	    this.handlingCode = handlingCode;
	}
	
	
	
	
	/**
	 * Return lotNumberText.
	 * @return lotNumberText
	 */
	public net.ihe.gazelle.hl7v3.datatypes.ST getLotNumberText() {
	    return lotNumberText;
	}
	
	/**
	 * Set a value to attribute lotNumberText.
     */
	public void setLotNumberText(net.ihe.gazelle.hl7v3.datatypes.ST lotNumberText) {
	    this.lotNumberText = lotNumberText;
	}
	
	
	
	
	/**
	 * Return expirationTime.
	 * @return expirationTime
	 */
	public net.ihe.gazelle.hl7v3.datatypes.IVLTS getExpirationTime() {
	    return expirationTime;
	}
	
	/**
	 * Set a value to attribute expirationTime.
     */
	public void setExpirationTime(net.ihe.gazelle.hl7v3.datatypes.IVLTS expirationTime) {
	    this.expirationTime = expirationTime;
	}
	
	
	
	
	/**
	 * Return asSpecimenAlternateIdentifier.
	 * @return asSpecimenAlternateIdentifier
	 */
	public List<net.ihe.gazelle.hl7v3.coctmt080000UV.COCTMT080000UVSpecimenAlternateIdentifier> getAsSpecimenAlternateIdentifier() {
		if (asSpecimenAlternateIdentifier == null) {
	        asSpecimenAlternateIdentifier = new ArrayList<>();
	    }
	    return asSpecimenAlternateIdentifier;
	}
	
	/**
	 * Set a value to attribute asSpecimenAlternateIdentifier.
     */
	public void setAsSpecimenAlternateIdentifier(List<net.ihe.gazelle.hl7v3.coctmt080000UV.COCTMT080000UVSpecimenAlternateIdentifier> asSpecimenAlternateIdentifier) {
	    this.asSpecimenAlternateIdentifier = asSpecimenAlternateIdentifier;
	}
	
	
	
	/**
	 * Add a asSpecimenAlternateIdentifier to the asSpecimenAlternateIdentifier collection.
	 * @param asSpecimenAlternateIdentifier_elt Element to add.
	 */
	public void addAsSpecimenAlternateIdentifier(net.ihe.gazelle.hl7v3.coctmt080000UV.COCTMT080000UVSpecimenAlternateIdentifier asSpecimenAlternateIdentifier_elt) {
	    this.asSpecimenAlternateIdentifier.add(asSpecimenAlternateIdentifier_elt);
	}
	
	/**
	 * Remove a asSpecimenAlternateIdentifier to the asSpecimenAlternateIdentifier collection.
	 * @param asSpecimenAlternateIdentifier_elt Element to remove
	 */
	public void removeAsSpecimenAlternateIdentifier(net.ihe.gazelle.hl7v3.coctmt080000UV.COCTMT080000UVSpecimenAlternateIdentifier asSpecimenAlternateIdentifier_elt) {
	    this.asSpecimenAlternateIdentifier.remove(asSpecimenAlternateIdentifier_elt);
	}
	
	/**
	 * Return asManufacturedProduct.
	 * @return asManufacturedProduct
	 */
	public net.ihe.gazelle.hl7v3.coctmt080000UV.COCTMT080000UVManufacturedProduct getAsManufacturedProduct() {
	    return asManufacturedProduct;
	}
	
	/**
	 * Set a value to attribute asManufacturedProduct.
     */
	public void setAsManufacturedProduct(net.ihe.gazelle.hl7v3.coctmt080000UV.COCTMT080000UVManufacturedProduct asManufacturedProduct) {
	    this.asManufacturedProduct = asManufacturedProduct;
	}
	
	
	
	
	/**
	 * Return asSpecimenStub.
	 * @return asSpecimenStub
	 */
	public List<net.ihe.gazelle.hl7v3.coctmt080000UV.COCTMT080000UVSpecimenStub> getAsSpecimenStub() {
		if (asSpecimenStub == null) {
	        asSpecimenStub = new ArrayList<>();
	    }
	    return asSpecimenStub;
	}
	
	/**
	 * Set a value to attribute asSpecimenStub.
     */
	public void setAsSpecimenStub(List<net.ihe.gazelle.hl7v3.coctmt080000UV.COCTMT080000UVSpecimenStub> asSpecimenStub) {
	    this.asSpecimenStub = asSpecimenStub;
	}
	
	
	
	/**
	 * Add a asSpecimenStub to the asSpecimenStub collection.
	 * @param asSpecimenStub_elt Element to add.
	 */
	public void addAsSpecimenStub(net.ihe.gazelle.hl7v3.coctmt080000UV.COCTMT080000UVSpecimenStub asSpecimenStub_elt) {
	    this.asSpecimenStub.add(asSpecimenStub_elt);
	}
	
	/**
	 * Remove a asSpecimenStub to the asSpecimenStub collection.
	 * @param asSpecimenStub_elt Element to remove
	 */
	public void removeAsSpecimenStub(net.ihe.gazelle.hl7v3.coctmt080000UV.COCTMT080000UVSpecimenStub asSpecimenStub_elt) {
	    this.asSpecimenStub.remove(asSpecimenStub_elt);
	}
	
	/**
	 * Return asContent.
	 * @return asContent
	 */
	public net.ihe.gazelle.hl7v3.coctmt080000UV.COCTMT080000UVContent1 getAsContent() {
	    return asContent;
	}
	
	/**
	 * Set a value to attribute asContent.
     */
	public void setAsContent(net.ihe.gazelle.hl7v3.coctmt080000UV.COCTMT080000UVContent1 asContent) {
	    this.asContent = asContent;
	}
	
	
	
	
	/**
	 * Return additive.
	 * @return additive
	 */
	public List<net.ihe.gazelle.hl7v3.coctmt080000UV.COCTMT080000UVAdditive> getAdditive() {
		if (additive == null) {
	        additive = new ArrayList<>();
	    }
	    return additive;
	}
	
	/**
	 * Set a value to attribute additive.
     */
	public void setAdditive(List<net.ihe.gazelle.hl7v3.coctmt080000UV.COCTMT080000UVAdditive> additive) {
	    this.additive = additive;
	}
	
	
	
	/**
	 * Add a additive to the additive collection.
	 * @param additive_elt Element to add.
	 */
	public void addAdditive(net.ihe.gazelle.hl7v3.coctmt080000UV.COCTMT080000UVAdditive additive_elt) {
	    this.additive.add(additive_elt);
	}
	
	/**
	 * Remove a additive to the additive collection.
	 * @param additive_elt Element to remove
	 */
	public void removeAdditive(net.ihe.gazelle.hl7v3.coctmt080000UV.COCTMT080000UVAdditive additive_elt) {
	    this.additive.remove(additive_elt);
	}
	
	/**
	 * Return classCode.
	 * @return classCode
	 */
	public net.ihe.gazelle.hl7v3.voc.EntityClassManufacturedMaterial getClassCode() {
	    return classCode;
	}
	
	/**
	 * Set a value to attribute classCode.
     */
	public void setClassCode(net.ihe.gazelle.hl7v3.voc.EntityClassManufacturedMaterial classCode) {
	    this.classCode = classCode;
	}
	
	
	
	
	/**
	 * Return determinerCode.
	 * @return determinerCode
	 */
	public net.ihe.gazelle.hl7v3.voc.EntityDeterminer getDeterminerCode() {
	    return determinerCode;
	}
	
	/**
	 * Set a value to attribute determinerCode.
     */
	public void setDeterminerCode(net.ihe.gazelle.hl7v3.voc.EntityDeterminer determinerCode) {
	    this.determinerCode = determinerCode;
	}
	
	
	
	
	/**
	 * Return nullFlavor.
	 * @return nullFlavor
	 */
	public net.ihe.gazelle.hl7v3.voc.NullFlavor getNullFlavor() {
	    return nullFlavor;
	}
	
	/**
	 * Set a value to attribute nullFlavor.
     */
	public void setNullFlavor(net.ihe.gazelle.hl7v3.voc.NullFlavor nullFlavor) {
	    this.nullFlavor = nullFlavor;
	}
	
	
	
	
	
	public Node get_xmlNodePresentation() {
		if (_xmlNodePresentation == null){
				JAXBContext jc;
				DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
				dbf.setNamespaceAware(true);
				DocumentBuilder db = null;
				Document doc = null;
				try {
					db = dbf.newDocumentBuilder();
					doc = db.newDocument();
				} catch (ParserConfigurationException ignored) {}
				try {
					jc = JAXBContext.newInstance("net.ihe.gazelle.hl7v3.coctmt080000UV");
					Marshaller m = jc.createMarshaller();
					m.marshal(this, doc);
					_xmlNodePresentation = doc.getElementsByTagNameNS("urn:hl7-org:v3", "COCT_MT080000UV.Manufactured").item(0);
				} catch (JAXBException e) {
					try{
						db = dbf.newDocumentBuilder();
						_xmlNodePresentation = db.newDocument();
					}
					catch(Exception ignored){}
				}
			}
			return _xmlNodePresentation;
	}
	
	public void set_xmlNodePresentation(Node _xmlNodePresentation) {
		this._xmlNodePresentation = _xmlNodePresentation;
	}
	
	
	

	
	/**
     * validate by a module of validation
     * 
     */
   public static void validateByModule(COCTMT080000UVManufactured cOCTMT080000UVManufactured, String _location, ConstraintValidatorModule cvm, List<net.ihe.gazelle.validation.Notification> diagnostic){
   		if (cOCTMT080000UVManufactured != null){
   			cvm.validate(cOCTMT080000UVManufactured, _location, diagnostic);
			{
				int i = 0;
				for (net.ihe.gazelle.hl7v3.datatypes.CS realmCode: cOCTMT080000UVManufactured.getRealmCode()){
					net.ihe.gazelle.hl7v3.datatypes.CS.validateByModule(realmCode, _location + "/realmCode[" + i + "]", cvm, diagnostic);
					i++;
				}
			}
			
			net.ihe.gazelle.hl7v3.datatypes.II.validateByModule(cOCTMT080000UVManufactured.getTypeId(), _location + "/typeId", cvm, diagnostic);
			{
				int i = 0;
				for (net.ihe.gazelle.hl7v3.datatypes.II templateId: cOCTMT080000UVManufactured.getTemplateId()){
					net.ihe.gazelle.hl7v3.datatypes.II.validateByModule(templateId, _location + "/templateId[" + i + "]", cvm, diagnostic);
					i++;
				}
			}
			
			net.ihe.gazelle.hl7v3.datatypes.CE.validateByModule(cOCTMT080000UVManufactured.getCode(), _location + "/code", cvm, diagnostic);
			{
				int i = 0;
				for (net.ihe.gazelle.hl7v3.datatypes.PQ quantity: cOCTMT080000UVManufactured.getQuantity()){
					net.ihe.gazelle.hl7v3.datatypes.PQ.validateByModule(quantity, _location + "/quantity[" + i + "]", cvm, diagnostic);
					i++;
				}
			}
			
			net.ihe.gazelle.hl7v3.datatypes.ST.validateByModule(cOCTMT080000UVManufactured.getDesc(), _location + "/desc", cvm, diagnostic);
			net.ihe.gazelle.hl7v3.datatypes.CE.validateByModule(cOCTMT080000UVManufactured.getRiskCode(), _location + "/riskCode", cvm, diagnostic);
			net.ihe.gazelle.hl7v3.datatypes.CE.validateByModule(cOCTMT080000UVManufactured.getHandlingCode(), _location + "/handlingCode", cvm, diagnostic);
			net.ihe.gazelle.hl7v3.datatypes.ST.validateByModule(cOCTMT080000UVManufactured.getLotNumberText(), _location + "/lotNumberText", cvm, diagnostic);
			net.ihe.gazelle.hl7v3.datatypes.IVLTS.validateByModule(cOCTMT080000UVManufactured.getExpirationTime(), _location + "/expirationTime", cvm, diagnostic);
			{
				int i = 0;
				for (net.ihe.gazelle.hl7v3.coctmt080000UV.COCTMT080000UVSpecimenAlternateIdentifier asSpecimenAlternateIdentifier: cOCTMT080000UVManufactured.getAsSpecimenAlternateIdentifier()){
					net.ihe.gazelle.hl7v3.coctmt080000UV.COCTMT080000UVSpecimenAlternateIdentifier.validateByModule(asSpecimenAlternateIdentifier, _location + "/asSpecimenAlternateIdentifier[" + i + "]", cvm, diagnostic);
					i++;
				}
			}
			
			net.ihe.gazelle.hl7v3.coctmt080000UV.COCTMT080000UVManufacturedProduct.validateByModule(cOCTMT080000UVManufactured.getAsManufacturedProduct(), _location + "/asManufacturedProduct", cvm, diagnostic);
			{
				int i = 0;
				for (net.ihe.gazelle.hl7v3.coctmt080000UV.COCTMT080000UVSpecimenStub asSpecimenStub: cOCTMT080000UVManufactured.getAsSpecimenStub()){
					net.ihe.gazelle.hl7v3.coctmt080000UV.COCTMT080000UVSpecimenStub.validateByModule(asSpecimenStub, _location + "/asSpecimenStub[" + i + "]", cvm, diagnostic);
					i++;
				}
			}
			
			net.ihe.gazelle.hl7v3.coctmt080000UV.COCTMT080000UVContent1.validateByModule(cOCTMT080000UVManufactured.getAsContent(), _location + "/asContent", cvm, diagnostic);
			{
				int i = 0;
				for (net.ihe.gazelle.hl7v3.coctmt080000UV.COCTMT080000UVAdditive additive: cOCTMT080000UVManufactured.getAdditive()){
					net.ihe.gazelle.hl7v3.coctmt080000UV.COCTMT080000UVAdditive.validateByModule(additive, _location + "/additive[" + i + "]", cvm, diagnostic);
					i++;
				}
			}
			
    	}
    }

}