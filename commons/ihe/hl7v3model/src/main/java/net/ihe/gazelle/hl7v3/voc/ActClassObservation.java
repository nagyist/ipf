/**
 * ActClassObservation.java
 * <p>
 * File generated from the voc::ActClassObservation uml Enumeration
 * Generated by IHE - europe, gazelle team
 */
package net.ihe.gazelle.hl7v3.voc;

import jakarta.xml.bind.annotation.XmlEnum;
import jakarta.xml.bind.annotation.XmlEnumValue;
import jakarta.xml.bind.annotation.XmlRootElement;
import jakarta.xml.bind.annotation.XmlType;
/**
 * Description of the enumeration ActClassObservation.
 *
 */

@XmlType(name = "ActClassObservation")
@XmlEnum
@XmlRootElement(name = "ActClassObservation")
public enum ActClassObservation {
	@XmlEnumValue("ALRT")
	ALRT("ALRT"),
	@XmlEnumValue("CASE")
	CASE("CASE"),
	@XmlEnumValue("CLNTRL")
	CLNTRL("CLNTRL"),
	@XmlEnumValue("CNOD")
	CNOD("CNOD"),
	@XmlEnumValue("COND")
	COND("COND"),
	@XmlEnumValue("DETPOL")
	DETPOL("DETPOL"),
	@XmlEnumValue("DGIMG")
	DGIMG("DGIMG"),
	@XmlEnumValue("EXP")
	EXP("EXP"),
	@XmlEnumValue("GEN")
	GEN("GEN"),
	@XmlEnumValue("INVSTG")
	INVSTG("INVSTG"),
	@XmlEnumValue("LLD")
	LLD("LLD"),
	@XmlEnumValue("LOC")
	LOC("LOC"),
	@XmlEnumValue("OBS")
	OBS("OBS"),
	@XmlEnumValue("OBSCOR")
	OBSCOR("OBSCOR"),
	@XmlEnumValue("OBSSER")
	OBSSER("OBSSER"),
	@XmlEnumValue("OUTB")
	OUTB("OUTB"),
	@XmlEnumValue("PHN")
	PHN("PHN"),
	@XmlEnumValue("POL")
	POL("POL"),
	@XmlEnumValue("POS")
	POS("POS"),
	@XmlEnumValue("POSACC")
	POSACC("POSACC"),
	@XmlEnumValue("POSCOORD")
	POSCOORD("POSCOORD"),
	@XmlEnumValue("PRN")
	PRN("PRN"),
	@XmlEnumValue("RLD")
	RLD("RLD"),
	@XmlEnumValue("ROIBND")
	ROIBND("ROIBND"),
	@XmlEnumValue("ROIOVL")
	ROIOVL("ROIOVL"),
	@XmlEnumValue("RTRD")
	RTRD("RTRD"),
	@XmlEnumValue("SEQ")
	SEQ("SEQ"),
	@XmlEnumValue("SEQVAR")
	SEQVAR("SEQVAR"),
	@XmlEnumValue("SFWL")
	SFWL("SFWL"),
	@XmlEnumValue("SIT")
	SIT("SIT"),
	@XmlEnumValue("SPCOBS")
	SPCOBS("SPCOBS"),
	@XmlEnumValue("STN")
	STN("STN"),
	@XmlEnumValue("SUP")
	SUP("SUP"),
	@XmlEnumValue("TRD")
	TRD("TRD"),
	@XmlEnumValue("VERIF")
	VERIF("VERIF"),
	@XmlEnumValue("_ImagingSubjectOrientation")
	IMAGINGSUBJECTORIENTATION("_ImagingSubjectOrientation");
	
	private final String value;

    ActClassObservation(String v) {
        value = v;
    }
    
     public String value() {
        return value;
    }

    public static ActClassObservation fromValue(String v) {
        for (ActClassObservation c: ActClassObservation.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }
	
}