/**
 * COCTMT080000UVProcessStep.java
 * <p>
 * File generated from the coctmt080000UV::COCTMT080000UVProcessStep uml Class
 * Generated by IHE - europe, gazelle team
 */
package net.ihe.gazelle.hl7v3.coctmt080000UV;

import java.io.Serial;
import java.util.ArrayList;
import java.util.List;

import jakarta.xml.bind.JAXBContext;
import jakarta.xml.bind.JAXBException;
import jakarta.xml.bind.Marshaller;
import jakarta.xml.bind.annotation.XmlAccessType;
import jakarta.xml.bind.annotation.XmlAccessorType;
import jakarta.xml.bind.annotation.XmlAttribute;
import jakarta.xml.bind.annotation.XmlElement;
import jakarta.xml.bind.annotation.XmlRootElement;
import jakarta.xml.bind.annotation.XmlTransient;
import jakarta.xml.bind.annotation.XmlType;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;

import net.ihe.gazelle.gen.common.ConstraintValidatorModule;

import org.w3c.dom.Document;
import org.w3c.dom.Node;


/**
 * Description of the class COCTMT080000UVProcessStep.
 *
 */

@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "COCT_MT080000UV.ProcessStep", propOrder = {
	"realmCode",
	"typeId",
	"templateId",
	"id",
	"code",
	"text",
	"statusCode",
	"effectiveTime",
	"subject1",
	"subject2",
	"authorOrPerformer",
	"classCode",
	"moodCode",
	"nullFlavor"
})
@XmlRootElement(name = "COCT_MT080000UV.ProcessStep")
public class COCTMT080000UVProcessStep implements java.io.Serializable {
	
	/**
	 * 
	 */
	@Serial
    private static final long serialVersionUID = 1L;

	
	@XmlElement(name = "realmCode", namespace = "urn:hl7-org:v3")
	public List<net.ihe.gazelle.hl7v3.datatypes.CS> realmCode;
	@XmlElement(name = "typeId", namespace = "urn:hl7-org:v3")
	public net.ihe.gazelle.hl7v3.datatypes.II typeId;
	@XmlElement(name = "templateId", namespace = "urn:hl7-org:v3")
	public List<net.ihe.gazelle.hl7v3.datatypes.II> templateId;
	@XmlElement(name = "id", namespace = "urn:hl7-org:v3")
	public List<net.ihe.gazelle.hl7v3.datatypes.II> id;
	@XmlElement(name = "code", namespace = "urn:hl7-org:v3")
	public net.ihe.gazelle.hl7v3.datatypes.CD code;
	@XmlElement(name = "text", namespace = "urn:hl7-org:v3")
	public net.ihe.gazelle.hl7v3.datatypes.ST text;
	@XmlElement(name = "statusCode", namespace = "urn:hl7-org:v3")
	public net.ihe.gazelle.hl7v3.datatypes.CS statusCode;
	@XmlElement(name = "effectiveTime", namespace = "urn:hl7-org:v3")
	public net.ihe.gazelle.hl7v3.datatypes.IVLTS effectiveTime;
	@XmlElement(name = "subject1", namespace = "urn:hl7-org:v3")
	public List<net.ihe.gazelle.hl7v3.coctmt080000UV.COCTMT080000UVSubject1> subject1;
	@XmlElement(name = "subject2", namespace = "urn:hl7-org:v3")
	public List<net.ihe.gazelle.hl7v3.coctmt080000UV.COCTMT080000UVSubject2> subject2;
	@XmlElement(name = "authorOrPerformer", namespace = "urn:hl7-org:v3")
	public List<net.ihe.gazelle.hl7v3.coctmt080000UV.COCTMT080000UVAuthorOrPerformer> authorOrPerformer;
	@XmlAttribute(name = "classCode", required = true)
	public net.ihe.gazelle.hl7v3.voc.XLabProcessClassCodes classCode;
	@XmlAttribute(name = "moodCode", required = true)
	public net.ihe.gazelle.hl7v3.voc.ActMood moodCode;
	@XmlAttribute(name = "nullFlavor")
	public net.ihe.gazelle.hl7v3.voc.NullFlavor nullFlavor;
	
	/**
	 * An attribute containing marshalled element node
	 */
	@XmlTransient
	private org.w3c.dom.Node _xmlNodePresentation;
	
	
	/**
	 * Return realmCode.
	 * @return realmCode
	 */
	public List<net.ihe.gazelle.hl7v3.datatypes.CS> getRealmCode() {
		if (realmCode == null) {
	        realmCode = new ArrayList<>();
	    }
	    return realmCode;
	}
	
	/**
	 * Set a value to attribute realmCode.
     */
	public void setRealmCode(List<net.ihe.gazelle.hl7v3.datatypes.CS> realmCode) {
	    this.realmCode = realmCode;
	}
	
	
	
	/**
	 * Add a realmCode to the realmCode collection.
	 * @param realmCode_elt Element to add.
	 */
	public void addRealmCode(net.ihe.gazelle.hl7v3.datatypes.CS realmCode_elt) {
	    this.realmCode.add(realmCode_elt);
	}
	
	/**
	 * Remove a realmCode to the realmCode collection.
	 * @param realmCode_elt Element to remove
	 */
	public void removeRealmCode(net.ihe.gazelle.hl7v3.datatypes.CS realmCode_elt) {
	    this.realmCode.remove(realmCode_elt);
	}
	
	/**
	 * Return typeId.
	 * @return typeId
	 */
	public net.ihe.gazelle.hl7v3.datatypes.II getTypeId() {
	    return typeId;
	}
	
	/**
	 * Set a value to attribute typeId.
     */
	public void setTypeId(net.ihe.gazelle.hl7v3.datatypes.II typeId) {
	    this.typeId = typeId;
	}
	
	
	
	
	/**
	 * Return templateId.
	 * @return templateId
	 */
	public List<net.ihe.gazelle.hl7v3.datatypes.II> getTemplateId() {
		if (templateId == null) {
	        templateId = new ArrayList<>();
	    }
	    return templateId;
	}
	
	/**
	 * Set a value to attribute templateId.
     */
	public void setTemplateId(List<net.ihe.gazelle.hl7v3.datatypes.II> templateId) {
	    this.templateId = templateId;
	}
	
	
	
	/**
	 * Add a templateId to the templateId collection.
	 * @param templateId_elt Element to add.
	 */
	public void addTemplateId(net.ihe.gazelle.hl7v3.datatypes.II templateId_elt) {
	    this.templateId.add(templateId_elt);
	}
	
	/**
	 * Remove a templateId to the templateId collection.
	 * @param templateId_elt Element to remove
	 */
	public void removeTemplateId(net.ihe.gazelle.hl7v3.datatypes.II templateId_elt) {
	    this.templateId.remove(templateId_elt);
	}
	
	/**
	 * Return id.
	 * @return id
	 */
	public List<net.ihe.gazelle.hl7v3.datatypes.II> getId() {
		if (id == null) {
	        id = new ArrayList<>();
	    }
	    return id;
	}
	
	/**
	 * Set a value to attribute id.
     */
	public void setId(List<net.ihe.gazelle.hl7v3.datatypes.II> id) {
	    this.id = id;
	}
	
	
	
	/**
	 * Add a id to the id collection.
	 * @param id_elt Element to add.
	 */
	public void addId(net.ihe.gazelle.hl7v3.datatypes.II id_elt) {
	    this.id.add(id_elt);
	}
	
	/**
	 * Remove a id to the id collection.
	 * @param id_elt Element to remove
	 */
	public void removeId(net.ihe.gazelle.hl7v3.datatypes.II id_elt) {
	    this.id.remove(id_elt);
	}
	
	/**
	 * Return code.
	 * @return code
	 */
	public net.ihe.gazelle.hl7v3.datatypes.CD getCode() {
	    return code;
	}
	
	/**
	 * Set a value to attribute code.
     */
	public void setCode(net.ihe.gazelle.hl7v3.datatypes.CD code) {
	    this.code = code;
	}
	
	
	
	
	/**
	 * Return text.
	 * @return text
	 */
	public net.ihe.gazelle.hl7v3.datatypes.ST getText() {
	    return text;
	}
	
	/**
	 * Set a value to attribute text.
     */
	public void setText(net.ihe.gazelle.hl7v3.datatypes.ST text) {
	    this.text = text;
	}
	
	
	
	
	/**
	 * Return statusCode.
	 * @return statusCode
	 */
	public net.ihe.gazelle.hl7v3.datatypes.CS getStatusCode() {
	    return statusCode;
	}
	
	/**
	 * Set a value to attribute statusCode.
     */
	public void setStatusCode(net.ihe.gazelle.hl7v3.datatypes.CS statusCode) {
	    this.statusCode = statusCode;
	}
	
	
	
	
	/**
	 * Return effectiveTime.
	 * @return effectiveTime
	 */
	public net.ihe.gazelle.hl7v3.datatypes.IVLTS getEffectiveTime() {
	    return effectiveTime;
	}
	
	/**
	 * Set a value to attribute effectiveTime.
     */
	public void setEffectiveTime(net.ihe.gazelle.hl7v3.datatypes.IVLTS effectiveTime) {
	    this.effectiveTime = effectiveTime;
	}
	
	
	
	
	/**
	 * Return subject1.
	 * @return subject1
	 */
	public List<net.ihe.gazelle.hl7v3.coctmt080000UV.COCTMT080000UVSubject1> getSubject1() {
		if (subject1 == null) {
	        subject1 = new ArrayList<>();
	    }
	    return subject1;
	}
	
	/**
	 * Set a value to attribute subject1.
     */
	public void setSubject1(List<net.ihe.gazelle.hl7v3.coctmt080000UV.COCTMT080000UVSubject1> subject1) {
	    this.subject1 = subject1;
	}
	
	
	
	/**
	 * Add a subject1 to the subject1 collection.
	 * @param subject1_elt Element to add.
	 */
	public void addSubject1(net.ihe.gazelle.hl7v3.coctmt080000UV.COCTMT080000UVSubject1 subject1_elt) {
	    this.subject1.add(subject1_elt);
	}
	
	/**
	 * Remove a subject1 to the subject1 collection.
	 * @param subject1_elt Element to remove
	 */
	public void removeSubject1(net.ihe.gazelle.hl7v3.coctmt080000UV.COCTMT080000UVSubject1 subject1_elt) {
	    this.subject1.remove(subject1_elt);
	}
	
	/**
	 * Return subject2.
	 * @return subject2
	 */
	public List<net.ihe.gazelle.hl7v3.coctmt080000UV.COCTMT080000UVSubject2> getSubject2() {
		if (subject2 == null) {
	        subject2 = new ArrayList<>();
	    }
	    return subject2;
	}
	
	/**
	 * Set a value to attribute subject2.
     */
	public void setSubject2(List<net.ihe.gazelle.hl7v3.coctmt080000UV.COCTMT080000UVSubject2> subject2) {
	    this.subject2 = subject2;
	}
	
	
	
	/**
	 * Add a subject2 to the subject2 collection.
	 * @param subject2_elt Element to add.
	 */
	public void addSubject2(net.ihe.gazelle.hl7v3.coctmt080000UV.COCTMT080000UVSubject2 subject2_elt) {
	    this.subject2.add(subject2_elt);
	}
	
	/**
	 * Remove a subject2 to the subject2 collection.
	 * @param subject2_elt Element to remove
	 */
	public void removeSubject2(net.ihe.gazelle.hl7v3.coctmt080000UV.COCTMT080000UVSubject2 subject2_elt) {
	    this.subject2.remove(subject2_elt);
	}
	
	/**
	 * Return authorOrPerformer.
	 * @return authorOrPerformer
	 */
	public List<net.ihe.gazelle.hl7v3.coctmt080000UV.COCTMT080000UVAuthorOrPerformer> getAuthorOrPerformer() {
		if (authorOrPerformer == null) {
	        authorOrPerformer = new ArrayList<>();
	    }
	    return authorOrPerformer;
	}
	
	/**
	 * Set a value to attribute authorOrPerformer.
     */
	public void setAuthorOrPerformer(List<net.ihe.gazelle.hl7v3.coctmt080000UV.COCTMT080000UVAuthorOrPerformer> authorOrPerformer) {
	    this.authorOrPerformer = authorOrPerformer;
	}
	
	
	
	/**
	 * Add a authorOrPerformer to the authorOrPerformer collection.
	 * @param authorOrPerformer_elt Element to add.
	 */
	public void addAuthorOrPerformer(net.ihe.gazelle.hl7v3.coctmt080000UV.COCTMT080000UVAuthorOrPerformer authorOrPerformer_elt) {
	    this.authorOrPerformer.add(authorOrPerformer_elt);
	}
	
	/**
	 * Remove a authorOrPerformer to the authorOrPerformer collection.
	 * @param authorOrPerformer_elt Element to remove
	 */
	public void removeAuthorOrPerformer(net.ihe.gazelle.hl7v3.coctmt080000UV.COCTMT080000UVAuthorOrPerformer authorOrPerformer_elt) {
	    this.authorOrPerformer.remove(authorOrPerformer_elt);
	}
	
	/**
	 * Return classCode.
	 * @return classCode
	 */
	public net.ihe.gazelle.hl7v3.voc.XLabProcessClassCodes getClassCode() {
	    return classCode;
	}
	
	/**
	 * Set a value to attribute classCode.
     */
	public void setClassCode(net.ihe.gazelle.hl7v3.voc.XLabProcessClassCodes classCode) {
	    this.classCode = classCode;
	}
	
	
	
	
	/**
	 * Return moodCode.
	 * @return moodCode
	 */
	public net.ihe.gazelle.hl7v3.voc.ActMood getMoodCode() {
	    return moodCode;
	}
	
	/**
	 * Set a value to attribute moodCode.
     */
	public void setMoodCode(net.ihe.gazelle.hl7v3.voc.ActMood moodCode) {
	    this.moodCode = moodCode;
	}
	
	
	
	
	/**
	 * Return nullFlavor.
	 * @return nullFlavor
	 */
	public net.ihe.gazelle.hl7v3.voc.NullFlavor getNullFlavor() {
	    return nullFlavor;
	}
	
	/**
	 * Set a value to attribute nullFlavor.
     */
	public void setNullFlavor(net.ihe.gazelle.hl7v3.voc.NullFlavor nullFlavor) {
	    this.nullFlavor = nullFlavor;
	}
	
	
	
	
	
	public Node get_xmlNodePresentation() {
		if (_xmlNodePresentation == null){
				JAXBContext jc;
				DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
				dbf.setNamespaceAware(true);
				DocumentBuilder db = null;
				Document doc = null;
				try {
					db = dbf.newDocumentBuilder();
					doc = db.newDocument();
				} catch (ParserConfigurationException ignored) {}
				try {
					jc = JAXBContext.newInstance("net.ihe.gazelle.hl7v3.coctmt080000UV");
					Marshaller m = jc.createMarshaller();
					m.marshal(this, doc);
					_xmlNodePresentation = doc.getElementsByTagNameNS("urn:hl7-org:v3", "COCT_MT080000UV.ProcessStep").item(0);
				} catch (JAXBException e) {
					try{
						db = dbf.newDocumentBuilder();
						_xmlNodePresentation = db.newDocument();
					}
					catch(Exception ignored){}
				}
			}
			return _xmlNodePresentation;
	}
	
	public void set_xmlNodePresentation(Node _xmlNodePresentation) {
		this._xmlNodePresentation = _xmlNodePresentation;
	}
	
	
	

	
	/**
     * validate by a module of validation
     * 
     */
   public static void validateByModule(COCTMT080000UVProcessStep cOCTMT080000UVProcessStep, String _location, ConstraintValidatorModule cvm, List<net.ihe.gazelle.validation.Notification> diagnostic){
   		if (cOCTMT080000UVProcessStep != null){
   			cvm.validate(cOCTMT080000UVProcessStep, _location, diagnostic);
			{
				int i = 0;
				for (net.ihe.gazelle.hl7v3.datatypes.CS realmCode: cOCTMT080000UVProcessStep.getRealmCode()){
					net.ihe.gazelle.hl7v3.datatypes.CS.validateByModule(realmCode, _location + "/realmCode[" + i + "]", cvm, diagnostic);
					i++;
				}
			}
			
			net.ihe.gazelle.hl7v3.datatypes.II.validateByModule(cOCTMT080000UVProcessStep.getTypeId(), _location + "/typeId", cvm, diagnostic);
			{
				int i = 0;
				for (net.ihe.gazelle.hl7v3.datatypes.II templateId: cOCTMT080000UVProcessStep.getTemplateId()){
					net.ihe.gazelle.hl7v3.datatypes.II.validateByModule(templateId, _location + "/templateId[" + i + "]", cvm, diagnostic);
					i++;
				}
			}
			
			{
				int i = 0;
				for (net.ihe.gazelle.hl7v3.datatypes.II id: cOCTMT080000UVProcessStep.getId()){
					net.ihe.gazelle.hl7v3.datatypes.II.validateByModule(id, _location + "/id[" + i + "]", cvm, diagnostic);
					i++;
				}
			}
			
			net.ihe.gazelle.hl7v3.datatypes.CD.validateByModule(cOCTMT080000UVProcessStep.getCode(), _location + "/code", cvm, diagnostic);
			net.ihe.gazelle.hl7v3.datatypes.ST.validateByModule(cOCTMT080000UVProcessStep.getText(), _location + "/text", cvm, diagnostic);
			net.ihe.gazelle.hl7v3.datatypes.CS.validateByModule(cOCTMT080000UVProcessStep.getStatusCode(), _location + "/statusCode", cvm, diagnostic);
			net.ihe.gazelle.hl7v3.datatypes.IVLTS.validateByModule(cOCTMT080000UVProcessStep.getEffectiveTime(), _location + "/effectiveTime", cvm, diagnostic);
			{
				int i = 0;
				for (net.ihe.gazelle.hl7v3.coctmt080000UV.COCTMT080000UVSubject1 subject1: cOCTMT080000UVProcessStep.getSubject1()){
					net.ihe.gazelle.hl7v3.coctmt080000UV.COCTMT080000UVSubject1.validateByModule(subject1, _location + "/subject1[" + i + "]", cvm, diagnostic);
					i++;
				}
			}
			
			{
				int i = 0;
				for (net.ihe.gazelle.hl7v3.coctmt080000UV.COCTMT080000UVSubject2 subject2: cOCTMT080000UVProcessStep.getSubject2()){
					net.ihe.gazelle.hl7v3.coctmt080000UV.COCTMT080000UVSubject2.validateByModule(subject2, _location + "/subject2[" + i + "]", cvm, diagnostic);
					i++;
				}
			}
			
			{
				int i = 0;
				for (net.ihe.gazelle.hl7v3.coctmt080000UV.COCTMT080000UVAuthorOrPerformer authorOrPerformer: cOCTMT080000UVProcessStep.getAuthorOrPerformer()){
					net.ihe.gazelle.hl7v3.coctmt080000UV.COCTMT080000UVAuthorOrPerformer.validateByModule(authorOrPerformer, _location + "/authorOrPerformer[" + i + "]", cvm, diagnostic);
					i++;
				}
			}
			
    	}
    }

}