/**
 * COCTMT080000UVProcess.java
 * <p>
 * File generated from the coctmt080000UV::COCTMT080000UVProcess uml Class
 * Generated by IHE - europe, gazelle team
 */
package net.ihe.gazelle.hl7v3.coctmt080000UV;

import java.io.Serial;
import java.util.ArrayList;
import java.util.List;

import jakarta.xml.bind.JAXBContext;
import jakarta.xml.bind.JAXBException;
import jakarta.xml.bind.Marshaller;
import jakarta.xml.bind.annotation.XmlAccessType;
import jakarta.xml.bind.annotation.XmlAccessorType;
import jakarta.xml.bind.annotation.XmlAttribute;
import jakarta.xml.bind.annotation.XmlElement;
import jakarta.xml.bind.annotation.XmlRootElement;
import jakarta.xml.bind.annotation.XmlTransient;
import jakarta.xml.bind.annotation.XmlType;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;

import net.ihe.gazelle.gen.common.ConstraintValidatorModule;

import org.w3c.dom.Document;
import org.w3c.dom.Node;


/**
 * Description of the class COCTMT080000UVProcess.
 *
 */

@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "COCT_MT080000UV.Process", propOrder = {
	"realmCode",
	"typeId",
	"templateId",
	"id",
	"code",
	"text",
	"statusCode",
	"effectiveTime",
	"approachSiteCode",
	"targetSiteCode",
	"performer",
	"precondition",
	"classCode",
	"moodCode",
	"nullFlavor"
})
@XmlRootElement(name = "COCT_MT080000UV.Process")
public class COCTMT080000UVProcess implements java.io.Serializable {
	
	/**
	 * 
	 */
	@Serial
    private static final long serialVersionUID = 1L;

	
	@XmlElement(name = "realmCode", namespace = "urn:hl7-org:v3")
	public List<net.ihe.gazelle.hl7v3.datatypes.CS> realmCode;
	@XmlElement(name = "typeId", namespace = "urn:hl7-org:v3")
	public net.ihe.gazelle.hl7v3.datatypes.II typeId;
	@XmlElement(name = "templateId", namespace = "urn:hl7-org:v3")
	public List<net.ihe.gazelle.hl7v3.datatypes.II> templateId;
	@XmlElement(name = "id", namespace = "urn:hl7-org:v3")
	public List<net.ihe.gazelle.hl7v3.datatypes.II> id;
	@XmlElement(name = "code", required = true, namespace = "urn:hl7-org:v3")
	public net.ihe.gazelle.hl7v3.datatypes.CE code;
	@XmlElement(name = "text", namespace = "urn:hl7-org:v3")
	public net.ihe.gazelle.hl7v3.datatypes.ST text;
	@XmlElement(name = "statusCode", namespace = "urn:hl7-org:v3")
	public net.ihe.gazelle.hl7v3.datatypes.CS statusCode;
	@XmlElement(name = "effectiveTime", namespace = "urn:hl7-org:v3")
	public List<net.ihe.gazelle.hl7v3.datatypes.SXCMTS> effectiveTime;
	@XmlElement(name = "approachSiteCode", namespace = "urn:hl7-org:v3")
	public net.ihe.gazelle.hl7v3.datatypes.CD approachSiteCode;
	@XmlElement(name = "targetSiteCode", namespace = "urn:hl7-org:v3")
	public net.ihe.gazelle.hl7v3.datatypes.CD targetSiteCode;
	@XmlElement(name = "performer", namespace = "urn:hl7-org:v3")
	public List<net.ihe.gazelle.hl7v3.coctmt080000UV.COCTMT080000UVPerformer> performer;
	@XmlElement(name = "precondition", namespace = "urn:hl7-org:v3")
	public List<net.ihe.gazelle.hl7v3.coctmt080000UV.COCTMT080000UVPrecondition> precondition;
	@XmlAttribute(name = "classCode", required = true)
	public net.ihe.gazelle.hl7v3.voc.ActClassProcedure classCode;
	@XmlAttribute(name = "moodCode", required = true)
	public net.ihe.gazelle.hl7v3.voc.XActMoodIntentEvent moodCode;
	@XmlAttribute(name = "nullFlavor")
	public net.ihe.gazelle.hl7v3.voc.NullFlavor nullFlavor;
	
	/**
	 * An attribute containing marshalled element node
	 */
	@XmlTransient
	private org.w3c.dom.Node _xmlNodePresentation;
	
	
	/**
	 * Return realmCode.
	 * @return realmCode
	 */
	public List<net.ihe.gazelle.hl7v3.datatypes.CS> getRealmCode() {
		if (realmCode == null) {
	        realmCode = new ArrayList<>();
	    }
	    return realmCode;
	}
	
	/**
	 * Set a value to attribute realmCode.
     */
	public void setRealmCode(List<net.ihe.gazelle.hl7v3.datatypes.CS> realmCode) {
	    this.realmCode = realmCode;
	}
	
	
	
	/**
	 * Add a realmCode to the realmCode collection.
	 * @param realmCode_elt Element to add.
	 */
	public void addRealmCode(net.ihe.gazelle.hl7v3.datatypes.CS realmCode_elt) {
	    this.realmCode.add(realmCode_elt);
	}
	
	/**
	 * Remove a realmCode to the realmCode collection.
	 * @param realmCode_elt Element to remove
	 */
	public void removeRealmCode(net.ihe.gazelle.hl7v3.datatypes.CS realmCode_elt) {
	    this.realmCode.remove(realmCode_elt);
	}
	
	/**
	 * Return typeId.
	 * @return typeId
	 */
	public net.ihe.gazelle.hl7v3.datatypes.II getTypeId() {
	    return typeId;
	}
	
	/**
	 * Set a value to attribute typeId.
     */
	public void setTypeId(net.ihe.gazelle.hl7v3.datatypes.II typeId) {
	    this.typeId = typeId;
	}
	
	
	
	
	/**
	 * Return templateId.
	 * @return templateId
	 */
	public List<net.ihe.gazelle.hl7v3.datatypes.II> getTemplateId() {
		if (templateId == null) {
	        templateId = new ArrayList<>();
	    }
	    return templateId;
	}
	
	/**
	 * Set a value to attribute templateId.
     */
	public void setTemplateId(List<net.ihe.gazelle.hl7v3.datatypes.II> templateId) {
	    this.templateId = templateId;
	}
	
	
	
	/**
	 * Add a templateId to the templateId collection.
	 * @param templateId_elt Element to add.
	 */
	public void addTemplateId(net.ihe.gazelle.hl7v3.datatypes.II templateId_elt) {
	    this.templateId.add(templateId_elt);
	}
	
	/**
	 * Remove a templateId to the templateId collection.
	 * @param templateId_elt Element to remove
	 */
	public void removeTemplateId(net.ihe.gazelle.hl7v3.datatypes.II templateId_elt) {
	    this.templateId.remove(templateId_elt);
	}
	
	/**
	 * Return id.
	 * @return id
	 */
	public List<net.ihe.gazelle.hl7v3.datatypes.II> getId() {
		if (id == null) {
	        id = new ArrayList<>();
	    }
	    return id;
	}
	
	/**
	 * Set a value to attribute id.
     */
	public void setId(List<net.ihe.gazelle.hl7v3.datatypes.II> id) {
	    this.id = id;
	}
	
	
	
	/**
	 * Add a id to the id collection.
	 * @param id_elt Element to add.
	 */
	public void addId(net.ihe.gazelle.hl7v3.datatypes.II id_elt) {
	    this.id.add(id_elt);
	}
	
	/**
	 * Remove a id to the id collection.
	 * @param id_elt Element to remove
	 */
	public void removeId(net.ihe.gazelle.hl7v3.datatypes.II id_elt) {
	    this.id.remove(id_elt);
	}
	
	/**
	 * Return code.
	 * @return code
	 */
	public net.ihe.gazelle.hl7v3.datatypes.CE getCode() {
	    return code;
	}
	
	/**
	 * Set a value to attribute code.
     */
	public void setCode(net.ihe.gazelle.hl7v3.datatypes.CE code) {
	    this.code = code;
	}
	
	
	
	
	/**
	 * Return text.
	 * @return text
	 */
	public net.ihe.gazelle.hl7v3.datatypes.ST getText() {
	    return text;
	}
	
	/**
	 * Set a value to attribute text.
     */
	public void setText(net.ihe.gazelle.hl7v3.datatypes.ST text) {
	    this.text = text;
	}
	
	
	
	
	/**
	 * Return statusCode.
	 * @return statusCode
	 */
	public net.ihe.gazelle.hl7v3.datatypes.CS getStatusCode() {
	    return statusCode;
	}
	
	/**
	 * Set a value to attribute statusCode.
     */
	public void setStatusCode(net.ihe.gazelle.hl7v3.datatypes.CS statusCode) {
	    this.statusCode = statusCode;
	}
	
	
	
	
	/**
	 * Return effectiveTime.
	 * @return effectiveTime
	 */
	public List<net.ihe.gazelle.hl7v3.datatypes.SXCMTS> getEffectiveTime() {
		if (effectiveTime == null) {
	        effectiveTime = new ArrayList<>();
	    }
	    return effectiveTime;
	}
	
	/**
	 * Set a value to attribute effectiveTime.
     */
	public void setEffectiveTime(List<net.ihe.gazelle.hl7v3.datatypes.SXCMTS> effectiveTime) {
	    this.effectiveTime = effectiveTime;
	}
	
	
	
	/**
	 * Add a effectiveTime to the effectiveTime collection.
	 * @param effectiveTime_elt Element to add.
	 */
	public void addEffectiveTime(net.ihe.gazelle.hl7v3.datatypes.SXCMTS effectiveTime_elt) {
	    this.effectiveTime.add(effectiveTime_elt);
	}
	
	/**
	 * Remove a effectiveTime to the effectiveTime collection.
	 * @param effectiveTime_elt Element to remove
	 */
	public void removeEffectiveTime(net.ihe.gazelle.hl7v3.datatypes.SXCMTS effectiveTime_elt) {
	    this.effectiveTime.remove(effectiveTime_elt);
	}
	
	/**
	 * Return approachSiteCode.
	 * @return approachSiteCode
	 */
	public net.ihe.gazelle.hl7v3.datatypes.CD getApproachSiteCode() {
	    return approachSiteCode;
	}
	
	/**
	 * Set a value to attribute approachSiteCode.
     */
	public void setApproachSiteCode(net.ihe.gazelle.hl7v3.datatypes.CD approachSiteCode) {
	    this.approachSiteCode = approachSiteCode;
	}
	
	
	
	
	/**
	 * Return targetSiteCode.
	 * @return targetSiteCode
	 */
	public net.ihe.gazelle.hl7v3.datatypes.CD getTargetSiteCode() {
	    return targetSiteCode;
	}
	
	/**
	 * Set a value to attribute targetSiteCode.
     */
	public void setTargetSiteCode(net.ihe.gazelle.hl7v3.datatypes.CD targetSiteCode) {
	    this.targetSiteCode = targetSiteCode;
	}
	
	
	
	
	/**
	 * Return performer.
	 * @return performer
	 */
	public List<net.ihe.gazelle.hl7v3.coctmt080000UV.COCTMT080000UVPerformer> getPerformer() {
		if (performer == null) {
	        performer = new ArrayList<>();
	    }
	    return performer;
	}
	
	/**
	 * Set a value to attribute performer.
     */
	public void setPerformer(List<net.ihe.gazelle.hl7v3.coctmt080000UV.COCTMT080000UVPerformer> performer) {
	    this.performer = performer;
	}
	
	
	
	/**
	 * Add a performer to the performer collection.
	 * @param performer_elt Element to add.
	 */
	public void addPerformer(net.ihe.gazelle.hl7v3.coctmt080000UV.COCTMT080000UVPerformer performer_elt) {
	    this.performer.add(performer_elt);
	}
	
	/**
	 * Remove a performer to the performer collection.
	 * @param performer_elt Element to remove
	 */
	public void removePerformer(net.ihe.gazelle.hl7v3.coctmt080000UV.COCTMT080000UVPerformer performer_elt) {
	    this.performer.remove(performer_elt);
	}
	
	/**
	 * Return precondition.
	 * @return precondition
	 */
	public List<net.ihe.gazelle.hl7v3.coctmt080000UV.COCTMT080000UVPrecondition> getPrecondition() {
		if (precondition == null) {
	        precondition = new ArrayList<>();
	    }
	    return precondition;
	}
	
	/**
	 * Set a value to attribute precondition.
     */
	public void setPrecondition(List<net.ihe.gazelle.hl7v3.coctmt080000UV.COCTMT080000UVPrecondition> precondition) {
	    this.precondition = precondition;
	}
	
	
	
	/**
	 * Add a precondition to the precondition collection.
	 * @param precondition_elt Element to add.
	 */
	public void addPrecondition(net.ihe.gazelle.hl7v3.coctmt080000UV.COCTMT080000UVPrecondition precondition_elt) {
	    this.precondition.add(precondition_elt);
	}
	
	/**
	 * Remove a precondition to the precondition collection.
	 * @param precondition_elt Element to remove
	 */
	public void removePrecondition(net.ihe.gazelle.hl7v3.coctmt080000UV.COCTMT080000UVPrecondition precondition_elt) {
	    this.precondition.remove(precondition_elt);
	}
	
	/**
	 * Return classCode.
	 * @return classCode
	 */
	public net.ihe.gazelle.hl7v3.voc.ActClassProcedure getClassCode() {
	    return classCode;
	}
	
	/**
	 * Set a value to attribute classCode.
     */
	public void setClassCode(net.ihe.gazelle.hl7v3.voc.ActClassProcedure classCode) {
	    this.classCode = classCode;
	}
	
	
	
	
	/**
	 * Return moodCode.
	 * @return moodCode
	 */
	public net.ihe.gazelle.hl7v3.voc.XActMoodIntentEvent getMoodCode() {
	    return moodCode;
	}
	
	/**
	 * Set a value to attribute moodCode.
     */
	public void setMoodCode(net.ihe.gazelle.hl7v3.voc.XActMoodIntentEvent moodCode) {
	    this.moodCode = moodCode;
	}
	
	
	
	
	/**
	 * Return nullFlavor.
	 * @return nullFlavor
	 */
	public net.ihe.gazelle.hl7v3.voc.NullFlavor getNullFlavor() {
	    return nullFlavor;
	}
	
	/**
	 * Set a value to attribute nullFlavor.
     */
	public void setNullFlavor(net.ihe.gazelle.hl7v3.voc.NullFlavor nullFlavor) {
	    this.nullFlavor = nullFlavor;
	}
	
	
	
	
	
	public Node get_xmlNodePresentation() {
		if (_xmlNodePresentation == null){
				JAXBContext jc;
				DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
				dbf.setNamespaceAware(true);
				DocumentBuilder db = null;
				Document doc = null;
				try {
					db = dbf.newDocumentBuilder();
					doc = db.newDocument();
				} catch (ParserConfigurationException ignored) {}
				try {
					jc = JAXBContext.newInstance("net.ihe.gazelle.hl7v3.coctmt080000UV");
					Marshaller m = jc.createMarshaller();
					m.marshal(this, doc);
					_xmlNodePresentation = doc.getElementsByTagNameNS("urn:hl7-org:v3", "COCT_MT080000UV.Process").item(0);
				} catch (JAXBException e) {
					try{
						db = dbf.newDocumentBuilder();
						_xmlNodePresentation = db.newDocument();
					}
					catch(Exception ignored){}
				}
			}
			return _xmlNodePresentation;
	}
	
	public void set_xmlNodePresentation(Node _xmlNodePresentation) {
		this._xmlNodePresentation = _xmlNodePresentation;
	}
	
	
	

	
	/**
     * validate by a module of validation
     * 
     */
   public static void validateByModule(COCTMT080000UVProcess cOCTMT080000UVProcess, String _location, ConstraintValidatorModule cvm, List<net.ihe.gazelle.validation.Notification> diagnostic){
   		if (cOCTMT080000UVProcess != null){
   			cvm.validate(cOCTMT080000UVProcess, _location, diagnostic);
			{
				int i = 0;
				for (net.ihe.gazelle.hl7v3.datatypes.CS realmCode: cOCTMT080000UVProcess.getRealmCode()){
					net.ihe.gazelle.hl7v3.datatypes.CS.validateByModule(realmCode, _location + "/realmCode[" + i + "]", cvm, diagnostic);
					i++;
				}
			}
			
			net.ihe.gazelle.hl7v3.datatypes.II.validateByModule(cOCTMT080000UVProcess.getTypeId(), _location + "/typeId", cvm, diagnostic);
			{
				int i = 0;
				for (net.ihe.gazelle.hl7v3.datatypes.II templateId: cOCTMT080000UVProcess.getTemplateId()){
					net.ihe.gazelle.hl7v3.datatypes.II.validateByModule(templateId, _location + "/templateId[" + i + "]", cvm, diagnostic);
					i++;
				}
			}
			
			{
				int i = 0;
				for (net.ihe.gazelle.hl7v3.datatypes.II id: cOCTMT080000UVProcess.getId()){
					net.ihe.gazelle.hl7v3.datatypes.II.validateByModule(id, _location + "/id[" + i + "]", cvm, diagnostic);
					i++;
				}
			}
			
			net.ihe.gazelle.hl7v3.datatypes.CE.validateByModule(cOCTMT080000UVProcess.getCode(), _location + "/code", cvm, diagnostic);
			net.ihe.gazelle.hl7v3.datatypes.ST.validateByModule(cOCTMT080000UVProcess.getText(), _location + "/text", cvm, diagnostic);
			net.ihe.gazelle.hl7v3.datatypes.CS.validateByModule(cOCTMT080000UVProcess.getStatusCode(), _location + "/statusCode", cvm, diagnostic);
			{
				int i = 0;
				for (net.ihe.gazelle.hl7v3.datatypes.SXCMTS effectiveTime: cOCTMT080000UVProcess.getEffectiveTime()){
					net.ihe.gazelle.hl7v3.datatypes.SXCMTS.validateByModule(effectiveTime, _location + "/effectiveTime[" + i + "]", cvm, diagnostic);
					i++;
				}
			}
			
			net.ihe.gazelle.hl7v3.datatypes.CD.validateByModule(cOCTMT080000UVProcess.getApproachSiteCode(), _location + "/approachSiteCode", cvm, diagnostic);
			net.ihe.gazelle.hl7v3.datatypes.CD.validateByModule(cOCTMT080000UVProcess.getTargetSiteCode(), _location + "/targetSiteCode", cvm, diagnostic);
			{
				int i = 0;
				for (net.ihe.gazelle.hl7v3.coctmt080000UV.COCTMT080000UVPerformer performer: cOCTMT080000UVProcess.getPerformer()){
					net.ihe.gazelle.hl7v3.coctmt080000UV.COCTMT080000UVPerformer.validateByModule(performer, _location + "/performer[" + i + "]", cvm, diagnostic);
					i++;
				}
			}
			
			{
				int i = 0;
				for (net.ihe.gazelle.hl7v3.coctmt080000UV.COCTMT080000UVPrecondition precondition: cOCTMT080000UVProcess.getPrecondition()){
					net.ihe.gazelle.hl7v3.coctmt080000UV.COCTMT080000UVPrecondition.validateByModule(precondition, _location + "/precondition[" + i + "]", cvm, diagnostic);
					i++;
				}
			}
			
    	}
    }

}