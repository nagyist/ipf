<!--
  ~ Copyright 2018 the original author or authors.
  ~
  ~  Licensed under the Apache License, Version 2.0 (the "License");
  ~  you may not use this file except in compliance with the License.
  ~  You may obtain a copy of the License at
  ~
  ~         http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~  Unless required by applicable law or agreed to in writing, software
  ~  distributed under the License is distributed on an "AS IS" BASIS,
  ~  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~  See the License for the specific language governing permissions and
  ~  limitations under the License.
  -->
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:camel="http://camel.apache.org/schema/spring"
    xmlns:ipf="http://openehealth.org/schema/ipf-commons-core"    
    xsi:schemaLocation="
http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans.xsd
http://camel.apache.org/schema/spring
http://camel.apache.org/schema/spring/camel-spring.xsd
http://openehealth.org/schema/ipf-commons-core
http://openehealth.org/schema/ipf-commons-core.xsd">

    <import resource="classpath:META-INF/cxf/cxf.xml"/>
    <import resource="classpath:META-INF/cxf/cxf-servlet.xml"/>

    <camel:camelContext id="camelContext">
        <camel:jmxAgent id="agent" disabled="false"/>
        <camel:routeBuilder ref="routeBuilder"/>
    </camel:camelContext>

    <bean id="auditContext" class="org.openehealth.ipf.commons.audit.DefaultAuditContext">
        <property name="auditEnabled" value="true"/>
        <property name="auditMessageQueue" ref="mockedSender"/>
        <property name="auditSourceId" value="sourceId"/>
        <property name="wsAuditDatasetEnricher">
            <bean class="org.openehealth.ipf.commons.ihe.ws.cxf.audit.SwissEprWsAuditDatasetEnricher"/>
        </property>
    </bean>

    <bean id="mockedSender" class="org.openehealth.ipf.commons.audit.queue.RecordingAuditMessageQueue"/>
    
	<ipf:globalContext id="globalContext"/>

    <bean id="logFileNamePrefix" class="java.lang.String">
        <constructor-arg value="#{systemProperties['IPF_LOG_DIR']}/[processId]/[date('yyyyMMdd-HH00')]/[sequenceId]" />
    </bean>

    <bean id="serverInLogger" class="org.openehealth.ipf.commons.ihe.ws.cxf.payload.InPayloadLoggerInterceptor">
        <constructor-arg value="#{@logFileNamePrefix}-server-in.txt" />
    </bean>

    <bean id="serverOutLogger" class="org.openehealth.ipf.commons.ihe.ws.cxf.payload.OutPayloadLoggerInterceptor">
        <constructor-arg value="#{@logFileNamePrefix}-server-out[partialResponse ? '-partial' : ''].txt" />
    </bean>

    <bean id="clientSyncInLogger" class="org.openehealth.ipf.commons.ihe.ws.cxf.payload.InPayloadLoggerInterceptor">
        <constructor-arg value="#{@logFileNamePrefix}-client-sync-in.txt" />
    </bean>

    <bean id="clientSyncOutLogger" class="org.openehealth.ipf.commons.ihe.ws.cxf.payload.OutPayloadLoggerInterceptor">
        <constructor-arg value="#{@logFileNamePrefix}-client-sync-out.txt" />
    </bean>

    <bean id="clientAsyncInLogger" class="org.openehealth.ipf.commons.ihe.ws.cxf.payload.InPayloadLoggerInterceptor">
        <constructor-arg value="#{@logFileNamePrefix}-client-async-in.txt" />
    </bean>

    <bean id="clientAsyncOutLogger" class="org.openehealth.ipf.commons.ihe.ws.cxf.payload.OutPayloadLoggerInterceptor">
        <constructor-arg value="#{@logFileNamePrefix}-client-async-out.txt" />
    </bean>

    <import resource="ehcache-spring.xml" />

</beans>
